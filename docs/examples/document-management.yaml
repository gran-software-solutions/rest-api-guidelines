openapi: 3.0.3
info:
  title: Document management
  description: Document management
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
security:
  - oauth2: [ read, write ]
paths:
  /documents:
    get:
      summary: Retrieves user documents
      operationId: getDocuments
      security:
        - oauth2:
            - read
      parameters:
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '204':
          description: In case no documents are found
    post:
      summary: Create a document
      operationId: createDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Created
          headers:
            location:
              schema:
                type: string
                description: Location of the created document

        '413':
          description: File too large
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                fileTooLarge:
                  value:
                    type: '/errors/file-too-large'
                    title: 'File too large'
                    status: 413
                    detail: 'The file is too large.'
                    instance: 'SOME_UUID_HERE'

        '400':
          description: In case of validation errors, such as missing required fields, file size too large, etc.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingDescription:
                  value:
                    type: '/errors/missing-required-field'
                    title: 'Missing description field'
                    status: 400
                    detail: 'The description is required.'
                    instance: 'SOME_UUID_HERE'
                missingTags:
                  value:
                    type: '/errors/missing-required-field'
                    title: 'Missing tags'
                    status: 400
                    detail: 'The tags are required.'
                    instance: 'SOME_UUID_HERE'
components:
  parameters:
    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
      description: |
        Offset the number of results
        
        The offset must be greater than or equal to 0. If the offset is not specified, the default value of 0 will be used.
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: |
        Limit the number of results
        
        The limit must be between 1 and 100. If the limit is not specified, the default value of 10 will be used.
    Filter:
      name: filter
      in: query
      schema:
        type: string
        example: name eq "John"
      description: |
        Filter by field
        
        If the filtering field does not exist, it will be ignored. If the field is prefixed with a minus sign, the filtering will be negated. 
        If the field is prefixed with a plus sign, the filtering will be positive. If the field is not prefixed with a minus or plus sign, the filtering will be positive. 
        Multiple fields can be specified, separated by commas
    Query:
      name: query
      in: query
      schema:
        type: string
        example: 'cobol developer'
      description: |
        Query
        
        The query is a string that will be used to search for documents. The query will be matched against the description and tags fields.
    Sort:
      name: sort
      in: query
      schema:
        type: string
        example: '-createdAt,+description'
      description: |
        Sort by field
        
        If the sorting field does not exist, it will be ignored. If the field is prefixed with a minus sign, the sorting will be descending. 
        If the field is prefixed with a plus sign, the sorting will be ascending. If the field is not prefixed with a minus or plus sign, the sorting will be ascending. 
        Multiple fields can be specified, separated by commas
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
          description: Document ID
        description:
          type: string
          description: Document description
        tags:
          type: array
          items:
            type: string
          description: Document tags
        createdAt:
          type: string
          format: date-time
          description: Document creation date
        updatedAt:
          type: string
          format: date-time
          description: Document update date
    Error:
      properties:
        type:
          type: string
          description: URI reference RFC 3986
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description: URI reference RFC 3986
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes:
            read: Read access to protected resources
            write: Write access to protected resources